// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql" // Change this according to your database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  username  String
  password  String 
  jabatan   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model vehicleBrand {
  id            String         @id @default(uuid())
  name          String
  vehicleTypes  vehicleType[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleType {
  id            String         @id @default(uuid())
  name          String
  brandId       String
  vehicleBrand  vehicleBrand  @relation(fields: [brandId], references: [id], onUpdate: Cascade)
  vehicleModels vehicleModel[]
  features      vehicleFeature[]
  categories    vehicleCategory[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleModel {
  id            String         @id @default(uuid())
  name          String
  typeId        String
  vehicleType   vehicleType   @relation(fields: [typeId], references: [id], onUpdate: Cascade)
  priceLists    priceList[]
  specifications vehicleSpecification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleYear {
  id            String         @id @default(uuid())
  year          String
  priceLists    priceList[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model priceList {
  id            String         @id @default(uuid())
  yearId        String
  modelId       String
  categoryId    String
  featureId     String
  spekId        String
  vehicleYear   vehicleYear   @relation(fields: [yearId], references: [id], onUpdate: Cascade)
  vehicleModel  vehicleModel  @relation(fields: [modelId], references: [id], onUpdate: Cascade)
  vehicleCategory vehicleCategory @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  vehicleFeature vehicleFeature @relation(fields: [featureId], references: [id], onUpdate: Cascade)
  vehicleSpecification vehicleSpecification @relation(fields: [spekId], references: [id], onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleFeature {
  id            String         @id @default(uuid())
  name          String
  typeId        String
  priceLists    priceList[]
  vehicleType   vehicleType   @relation(fields: [typeId], references: [id], onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleCategory {
  id            String         @id @default(uuid())
  name          String
  typeId        String
  priceLists    priceList[]
  vehicleType   vehicleType   @relation(fields: [typeId], references: [id], onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model vehicleSpecification {
  id            String         @id @default(uuid())
  key           String
  value         String
  modelId       String
  priceLists    priceList[]
  vehicleModel  vehicleModel  @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
